using System;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.Logging;    
namespace func
{
    public static class Recurring
    {
        [FunctionName("Recurring")]
        public static void Run([TimerTrigger("0 */5 * * * *")]TimerInfo myTimer, ILogger log)
        {
            log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
        }
    }
}




/////////////////////////////////////////////////////////////////
V.2

using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;    
namespace func
{
    public static class GetSettingInfo
    {
        [FunctionName("GetSettingInfo")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");    
            string name = req.Query["name"];    
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            dynamic data = JsonConvert.DeserializeObject(requestBody);
            name = name ?? data?.name;    
            string responseMessage = string.IsNullOrEmpty(name)
                ? "This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response."
                : $"Hello, {name}. This HTTP triggered function executed successfully.";    
            return new OkObjectResult(responseMessage);
        }
    }
}



////////////////////////////////////////////////////////////////////////////////



Add the following lines of code to add using directives for the Microsoft.AspNetCore.Http, Microsoft.AspNetCore.Mvc, and Microsoft.Azure.WebJobs namespaces:

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
Create a new public static class named GetSettingInfo:

public static class GetSettingInfo
{ }
Observe the GetSettingInfo.cs file again, which should now include the following code:

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
public static class GetSettingInfo
{ }
Within the GetSettingInfo class, add the following code block to create a new public static expression-bodied method named Run that returns a variable of type IActionResult and that also takes in variables of type HttpRequest and string as parameters named request and json:

public static IActionResult Run(
    HttpRequest request,
    string json)
    => null;
Note: You are only temporarily setting the return value to null.

Add the following code to append an attribute to the Run method of type FunctionNameAttribute that has its name parameter set to a value of GetSettingInfo:

[FunctionName("GetSettingInfo")]
public static IActionResult Run(
    HttpRequest request,
    string json)
    => null;
Add the following code to append an attribute to the request parameter of type HttpTriggerAttribute that has its methods parameter array set to a single value of GET:

[FunctionName("GetSettingInfo")]
public static IActionResult Run(
    [HttpTrigger("GET")] HttpRequest request,
    string json)
    => null;
Add the following code to append an attribute to the json parameter of type BlobAttribute that has its blobPath parameter set to a value of content/settings.json:

[FunctionName("GetSettingInfo")]
public static IActionResult Run(
    [HttpTrigger("GET")] HttpRequest request,
    [Blob("content/settings.json")] string json)
    => null;
Add the following code to update the Run expression-bodied method to return a new instance of the OkObjectResult class passing in the value of the json method parameter as the sole constructor parameter:

[FunctionName("GetSettingInfo")]
public static IActionResult Run(
    [HttpTrigger("GET")] HttpRequest request,
    [Blob("content/settings.json")] string json)
    => new OkObjectResult(json);
Observe the GetSettingInfo.cs file again, which should now include the following code:

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
public static class GetSettingInfo
{
    [FunctionName("GetSettingInfo")]
    public static IActionResult Run(
        [HttpTrigger("GET")] HttpRequest request,
        [Blob("content/settings.json")] string json)
        => new OkObjectResult(json);
}
Select Save to save your changes to the GetSettingInfo.cs file.

Task 4: Register Azure Storage Blob extensions
On the taskbar, select the Windows Terminal icon.

Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\02\Starter\func directory:

cd F:\Allfiles\Labs\02\Starter\func
From the command prompt, run the following command to register the Microsoft.Azure.WebJobs.Extensions.Storage extension:

func extensions install --package Microsoft.Azure.WebJobs.Extensions.Storage --version 5.0.1
Run the following command to build the .NET project and to validate the extensions were installed correctly:

dotnet build
Close all currently running instances of the Windows Terminal application.

Task 5: Test the function by using httprepl
On the taskbar, select the Windows Terminal icon.

Run the following command to change the current directory to the Allfiles (F):\Allfiles\Labs\02\Starter\func directory:

cd F:\Allfiles\Labs\02\Starter\func
From the command prompt, run the following command to run the function app project:

func start --build
Note: You can review the documentation to [start the function app project locally][azure-functions-core-tools-start-function] using the Azure Functions Core Tools.

On the taskbar, select the Windows Terminal icon again to open a new instance of the Windows Terminal application.

From the command prompt, run the following command to start the httprepl tool setting the base Uniform Resource Identifier (URI) to http://localhost:7071:

httprepl http://localhost:7071
Note: An error message is displayed by the httprepl tool. This message occurs because the tool is searching for a Swagger definition file to use to traverse the API. Because your function project doesn't produce a Swagger definition file, you'll need to traverse the API manually.

When you receive the tool prompt, run the following command to browse to the relative api endpoint:

cd api
Run the following command to browse to the relative getsettinginfo endpoint:

cd getsettinginfo
Run the following command to run the get command for the current endpoint:

get
Observe the JSON content of the response from the function app, which should now include:

{
    "version": "0.2.4",
    "root": "/usr/libexec/mews_principal/",
    "device": {
        "id": "21e46d2b2b926cba031a23c6919"
    },
    "notifications": {
        "email": "joseph.price@contoso.com",
        "phone": "(425) 555-0162 x4151"
    }
}
Run the following command to exit the httprepl application:

exit
Close all currently running instances of the Windows Terminal application.
